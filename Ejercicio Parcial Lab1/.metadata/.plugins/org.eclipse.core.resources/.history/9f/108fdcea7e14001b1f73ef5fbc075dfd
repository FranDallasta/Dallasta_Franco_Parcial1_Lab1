/*
 * ABM.c
 *
 *  Created on: Oct 15, 2020
 *      Author: FRANCO
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "entidades.h"
#include "ABM.h"

#define LLENO 1
#define VACIO 0


int iniciarlizarElectros (est_electro array[], int LARGO)
{
	int retorno = -1;
	int i;
	if(array != NULL && LARGO >= 0)
	{
		for(i=0;i<LARGO;i++)
		{
			array[i].isEmpty = VACIO;
			retorno = 0;
		}
	}
	return retorno;
}

int buscarEmptyElectro (est_electro array[], int LARGO, int* posicion)
{
	int retorno =-1;
	int i;
	if(array != NULL && LARGO >= 0)
	{
		for(i=0; i<LARGO; i++)
		{
			if(array[i].isEmpty == VACIO){
			retorno = 0;
			*posicion = i;
			break;
			}
		}
	}
	return retorno;
}

int cargarElectrodomesticos(est_electro array[], int LARGO, int* i)
{
	int retorno = -1;
	int posicion = 0;

	if(array != NULL && LARGO >= 0)
	{
		if(buscarEmptyElectro(array, LARGO, &posicion)==0) //Hacer busar empty e inicializar el array de electros
		{
			array[posicion] =cargarElectrodomestico(*i);
			*i = *i +1;
			retorno = 0;
		}
		else
		{
			printf("No hay lugar");
			retorno = -1;
		}
	}
	return retorno;
}

int mostrarElectrodomesticos(est_electro array[], int LARGO)
{
	int i;
	int retorno = -1;
	if(array != NULL && LARGO >= 0)
	{
		for (i=0; i<LARGO; i++)
		{
			if(array[i].isEmpty != VACIO)
			{
				mostrarElectrodomestico(array[i]);
				retorno = 0;
			}
		}
	}
	return retorno;
}

int eliminarElectrodomesticos(est_electro array[], int LARGO,  int pedirId)
{
	int j;
	int retorno =-1;

	for(j = 0; j <LARGO; j++)
	{
		if(array[j].isEmpty==LLENO && array[j].id_electro == pedirId)
		{
			array[j].isEmpty= VACIO;
			break;
		}
	}

		return retorno;
}

int modificarElectrodomesticos(est_electro array[], int LARGO,  int pedirId)
{
	int auxSerie;
	int auxIDModelo;
	int opcion;
	int retorno = -1;
	int lugar =0;
	int j;

	for(j = 0; j <LARGO; j++)
	{
		if(array[j].id_electro == pedirId)
		{
			lugar = j;
			break;
		}
	}

	if(array != NULL)
	{
		do{
			system("cls");
		printf("\n 1) Modificar el modelo (por ID)");
		printf("\n 2) Modificar la serie");
		printf("\n 3) SALIR ");
		printf("\n Ingrese una opcion: ");
		scanf("%d", &opcion);

			switch (opcion)
			{
				case 1:
					printf("Ingrese el anio del electrodomestico: ");
					scanf("%d", &auxIDModelo);
					array[lugar].anio_electro= auxIDModelo ;
				break;
				case 2:
					printf("Ingrese la nueva serie del electrodomestico: ");
					scanf("%d", &auxSerie);
					array[lugar].serie_electro= auxSerie ;
				break;
				case 3:
				break;
			}
		}while(opcion != 3);
		retorno = 0;
	}
	return retorno;
}

// Reparaciones

int inicializarReparaciones (est_reparacion array[], int LARGO)
{
	int retorno = -1;
		int i;
		if(array != NULL && LARGO >= 0)
		{
			for(i=0;i<LARGO;i++)
			{
				array[i].isEmpty = VACIO;
				retorno = 0;
			}
		}
		return retorno;
}

int buscarEmptyReparaciones (est_reparacion array[], int LARGO, int* posicionRep)
{
	int retorno =-1;
		int i;
		if(array != NULL && LARGO >= 0)
		{
			for(i=0; i<LARGO; i++)
			{
				if(array[i].isEmpty == VACIO){
				retorno = 0;
				*posicionRep = i;
				break;
				}
			}
		}
		return retorno;
}
